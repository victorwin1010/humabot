<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	
	<http pattern="/jsp/login.jsp" security="none"/>
 	<http pattern="/jsp/common/**" security="none"/>
 	<http pattern="/css/**" security="none"/>
 	<http pattern="/js/**" security="none"/>
	<!-- auto-config = true 则使用from-login. 如果不使用该属性 则默认为http-basic(没有session). 
			-->
	<http auto-config="true" access-denied-page="/common/403.jsp">
		<!-- intercept-url:拦截器,可以设定哪些路径需要哪些权限来访问.  -->
		<intercept-url pattern="/index.jsp" access="IS_AUTHENTICATED_FULLY" />
		<intercept-url pattern="/admin.jsp" access="ROLE_ADMIN" />
		<intercept-url pattern="/jsp/usermanage/**" access="ROLE_ADMIN" />
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<!-- login-page:默认指定的登录页面. authentication-failure-url:出错后跳转页面. default-target-url:成功登陆后跳转页面 -->
		<form-login login-page="/jsp/login.jsp" authentication-failure-url="/jsp/login.jsp" default-target-url="/index.jsp" />
		<!-- logout-success-url:成功注销后跳转到的页面; -->
		<logout logout-success-url="/jsp/login.jsp"/>
		<http-basic />
		
		
		<!-- session-management是针对session的管理. 这里可以不配置. 如有需求可以配置. -->
		<!-- id登陆唯一. 后登陆的账号会挤掉第一次登陆的账号  error-if-maximum-exceeded="true" 禁止2次登陆;
			session-fixation-protection="none" 防止伪造sessionid攻击. 用户登录成功后会销毁用户当前的session.
			创建新的session,并把用户信息复制到新session中.
		 -->
		<session-management session-fixation-protection="none">
			<concurrency-control/>
		</session-management>
	</http>

	<!-- 权限管理操作 -->
	<authentication-manager>
		<authentication-provider>
			<!-- 
			密码加密方式. 常用的有md5 和 sha. 
			salt-source:忘记了.. 手头api关了,网速卡就不上网查了. 类似在md5上又加了一层. 放置暴力破解. 追加安全性.-->
			<password-encoder hash="md5">
				<salt-source user-property="username"/>
			</password-encoder>
			 
			 <!-- 注入dataSource验证数据库中的用户名.密码.账号状态.和权限相关; -->
			<jdbc-user-service data-source-ref="dataSource"
				users-by-username-query="select user_account as username,user_password as password,enabled,is_sys from pub_users where user_account = ? and enabled = 'Y'"
				authorities-by-username-query="select u.user_account as username,r.role_name from pub_users u join pub_users_roles ur on u.user_id = ur.users_roles_id join pub_roles r on r.role_id = ur.users_roles_id where u.user_account = ?" 
				cache-ref="userCache"
				/>
			<!--
				使用固定的用户名和密码及权限来做验证.
				<user-service>
				<user name="admin" password="admin" authorities="ROLE_USER, ROLE_ADMIN" />
				<user name="user" password="user" authorities="ROLE_USER" />
				</user-service>
			 -->
		</authentication-provider>
	</authentication-manager>
	
	<beans:bean id="userCache" class="org.springframework.security.core.userdetails.cache.EhCacheBasedUserCache">
	    <beans:property name="cache" ref="userEhCache"/>
	</beans:bean>
	
	<beans:bean id="userEhCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
	    <beans:property name="cacheManager" ref="cacheManager"/>
	    <beans:property name="cacheName" value="userCache"/>
	</beans:bean>
	
	<beans:bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
	    <beans:property name="configLocation" value="classpath:ehcache.xml"/>
	</beans:bean>
</beans:beans>